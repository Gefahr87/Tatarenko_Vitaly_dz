'''
Осуществить программу работы с органическими клетками, состоящими из ячеек. Необходимо
создать класс «Клетка». В его конструкторе инициализировать параметр, соответствующий
количеству ячеек клетки (целое число). В классе должны быть реализованы методы
перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()),
умножение (__mul__()), деление (__floordiv____truediv__()). Эти методы должны применяться
только к клеткам и выполнять увеличение, уменьшение, умножение и округление до целого
числа деления клеток соответственно.
Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться
сумме ячеек исходных двух клеток
Вычитание. Участвуют две клетки. Операцию необходимо выполнять, только если разность
количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки — произведение
количества ячеек этих двух клеток.
Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как
целочисленное деление количества ячеек этих двух клеток.
В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и
количество ячеек в ряду. Этот метод позволяет организовать ячейки по рядам.
Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n
равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний
ряд записываются все оставшиеся.
Например, количество ячеек клетки равняется 12, а количество ячеек в ряду — 5. В этом
случае метод make_order() вернёт строку: *****\n*****\n**.
Или количество ячеек клетки — 15, а количество ячеек в ряду равняется 5. Тогда метод
make_order() вернёт строку: *****\n*****\n*****.
'''
from abc import abstractmethod

class Cell:
    def __init__(self, numbers_of_cell: int):
        self.number = numbers_of_cell

    @abstractmethod
    def __add__(self, other):
        print('Сумма ячеек двух клеток:')
        return self.number + other.number

    def __sub__(self, other):
        if self.number >= other.number:
            print('Результат вычитания клеток:')
            return self.number - other.number
        else:
            print('Вычесть клетки невозможно - разница отрицательна')

    def __mul__(self, other):
        print('Произведение двух клеток:')
        return self.number * other.number

    def __divmod__(self, other):
        print('Результат деления:')
        return self.number // other.number

    def make_order(self, cell_in_row):
        chain_of_cell = ''
        amount_of_sep = self.number // cell_in_row
        sep = 0
        summ = 0
        while sep <= amount_of_sep:
            i = 0
            if sep != 0 and summ != self.number:
                chain_of_cell += '/n'
            sep += 1
            while i < cell_in_row and summ < self.number:
                chain_of_cell += '*'
                i += 1
                summ += 1
        return chain_of_cell


cell_1 = Cell(45)
cell_2 = Cell(20)
cell_3 = Cell(12)
print(cell_1 + cell_2)
print(cell_1 - cell_2)
print(cell_1 * cell_2)
print(divmod(cell_1, cell_2))
print(cell_3.make_order(5))

